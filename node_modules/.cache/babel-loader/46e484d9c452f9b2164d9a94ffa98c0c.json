{"ast":null,"code":"// fetch data from API \nexport async function getDataList(searchBy, searchText) {\n  try {\n    let data;\n\n    if (searchBy === \"i\") {\n      const response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?${searchBy}=${searchText}`);\n      data = await response.json();\n    } else {\n      const response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?${searchBy}=${searchText}`);\n      data = await response.json();\n    }\n\n    return data;\n  } catch (err) {\n    console.log(\"err\", err);\n  }\n} //fetch random cocktail\n\nexport async function getRandomCocktail() {\n  try {\n    let data;\n    const response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/random.php`);\n    data = await response.json();\n    return data;\n  } catch (err) {\n    console.log(\"err\", err);\n  }\n} //fetch one cocktail\n\nexport async function getDataByID(id) {\n  try {\n    const response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${id}`);\n    const singleCocktail = await response.json();\n    return singleCocktail;\n  } catch (err) {\n    console.log(\"err\", err);\n  }\n} //clear random and favorite \n\nexport function clearFavorites() {\n  localStorage.removeItem(\"favoriteDrinks\");\n  this.setState({\n    favorites: []\n  });\n}\nexport function clearRandoms() {\n  this.setState({\n    randoms: []\n  });\n} //cleaning up ingredient list and  attach the measure to each one\n\nexport const ingredientsGenerator = drink => {\n  let ingredientsArr = [{\n    ingredient: drink.strIngredient1,\n    measure: drink.strMeasure1\n  }, {\n    ingredient: drink.strIngredient2,\n    measure: drink.strMeasure2\n  }, {\n    ingredient: drink.strIngredient3,\n    measure: drink.strMeasure3\n  }, {\n    ingredient: drink.strIngredient4,\n    measure: drink.strMeasure4\n  }, {\n    ingredient: drink.strIngredient5,\n    measure: drink.strMeasure5\n  }, {\n    ingredient: drink.strIngredient6,\n    measure: drink.strMeasure6\n  }, {\n    ingredient: drink.strIngredient7,\n    measure: drink.strMeasure7\n  }, {\n    ingredient: drink.strIngredient8,\n    measure: drink.strMeasure8\n  }, {\n    ingredient: drink.strIngredient9,\n    measure: drink.strMeasure9\n  }, {\n    ingredient: drink.strIngredient10,\n    measure: drink.strMeasure10\n  }, {\n    ingredient: drink.strIngredient11,\n    measure: drink.strMeasure11\n  }, {\n    ingredient: drink.strIngredient12,\n    measure: drink.strMeasure12\n  }, {\n    ingredient: drink.strIngredient13,\n    measure: drink.strMeasure13\n  }, {\n    ingredient: drink.strIngredient14,\n    measure: drink.strMeasure14\n  }, {\n    ingredient: drink.strIngredient15,\n    measure: drink.strMeasure15\n  }];\n  let preFinalIngredientsArr = ingredientsArr.filter(item => item.ingredient);\n  let finalIngredientsArr = preFinalIngredientsArr.map(item => {\n    if (item.measure === null || item.measure === \"\") {\n      return {\n        ingredient: item.ingredient,\n        measure: \"(as preferred)\"\n      };\n    } else {\n      return item;\n    }\n  });\n  return finalIngredientsArr;\n}; //checking if is in favorite list \n\nexport const isInFavorite = (array = [], id) => {\n  if (!array) {\n    return false;\n  } else {\n    return array.some(drink => drink.idDrink === id);\n  }\n}; // add drink to favorite list \n\nexport function saveToFavorite(drink) {\n  let drinks = this.state.favorites;\n  let finalDrinks = [];\n\n  if (drinks) {\n    if (isInFavorite(drinks, drink.idDrink)) {\n      finalDrinks = drinks.filter(item => item.idDrink !== drink.idDrink);\n    } else {\n      finalDrinks = [...drinks, drink];\n    } //\n\n  } else {\n    finalDrinks = [drink];\n  }\n\n  this.setState({\n    favorites: finalDrinks\n  });\n  localStorage.setItem(\"favoriteDrinks\", JSON.stringify(finalDrinks));\n}","map":{"version":3,"sources":["/home/dci/PROJECTS/cocktailmaster/src/utils/functions.js"],"names":["getDataList","searchBy","searchText","data","response","fetch","json","err","console","log","getRandomCocktail","getDataByID","id","singleCocktail","clearFavorites","localStorage","removeItem","setState","favorites","clearRandoms","randoms","ingredientsGenerator","drink","ingredientsArr","ingredient","strIngredient1","measure","strMeasure1","strIngredient2","strMeasure2","strIngredient3","strMeasure3","strIngredient4","strMeasure4","strIngredient5","strMeasure5","strIngredient6","strMeasure6","strIngredient7","strMeasure7","strIngredient8","strMeasure8","strIngredient9","strMeasure9","strIngredient10","strMeasure10","strIngredient11","strMeasure11","strIngredient12","strMeasure12","strIngredient13","strMeasure13","strIngredient14","strMeasure14","strIngredient15","strMeasure15","preFinalIngredientsArr","filter","item","finalIngredientsArr","map","isInFavorite","array","some","idDrink","saveToFavorite","drinks","state","finalDrinks","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["\n// fetch data from API \nexport async function getDataList(searchBy, searchText) {\n  try {\n    let data;\n    if (searchBy === \"i\") {\n      const response = await fetch(\n        `https://www.thecocktaildb.com/api/json/v1/1/filter.php?${searchBy}=${searchText}`\n      );\n      data = await response.json();\n    } else {\n      const response = await fetch(\n        `https://www.thecocktaildb.com/api/json/v1/1/search.php?${searchBy}=${searchText}`\n      );\n      data = await response.json();\n    }\n\n    return data;\n  } catch (err) {\n    console.log(\"err\", err);\n  }\n}\n\n\n\n//fetch random cocktail\nexport async function getRandomCocktail() {\n  try {\n    let data;\n\n    const response = await fetch(\n      `https://www.thecocktaildb.com/api/json/v1/1/random.php`\n    );\n    data = await response.json();\n\n    return data;\n  } catch (err) {\n    console.log(\"err\", err);\n  }\n}\n\n\n//fetch one cocktail\n\nexport async function getDataByID(id) {\n  try {\n    const response = await fetch(\n      `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${id}`\n    );\n    const singleCocktail = await response.json();\n\n    return singleCocktail;\n  } catch (err) {\n    console.log(\"err\", err);\n  }\n}\n\n\n//clear random and favorite \nexport function clearFavorites() {\n  localStorage.removeItem(\"favoriteDrinks\");\n  this.setState({ favorites: [] });\n}\nexport function clearRandoms() {\n  this.setState({ randoms: [] });\n}\n\n\n//cleaning up ingredient list and  attach the measure to each one\nexport const ingredientsGenerator = (drink) => {\n  let ingredientsArr = [\n    { ingredient: drink.strIngredient1, measure: drink.strMeasure1 },\n    { ingredient: drink.strIngredient2, measure: drink.strMeasure2 },\n    { ingredient: drink.strIngredient3, measure: drink.strMeasure3 },\n    { ingredient: drink.strIngredient4, measure: drink.strMeasure4 },\n    { ingredient: drink.strIngredient5, measure: drink.strMeasure5 },\n    { ingredient: drink.strIngredient6, measure: drink.strMeasure6 },\n    { ingredient: drink.strIngredient7, measure: drink.strMeasure7 },\n    { ingredient: drink.strIngredient8, measure: drink.strMeasure8 },\n    { ingredient: drink.strIngredient9, measure: drink.strMeasure9 },\n    { ingredient: drink.strIngredient10, measure: drink.strMeasure10 },\n    { ingredient: drink.strIngredient11, measure: drink.strMeasure11 },\n    { ingredient: drink.strIngredient12, measure: drink.strMeasure12 },\n    { ingredient: drink.strIngredient13, measure: drink.strMeasure13 },\n    { ingredient: drink.strIngredient14, measure: drink.strMeasure14 },\n    { ingredient: drink.strIngredient15, measure: drink.strMeasure15 },\n  ];\n\n  let preFinalIngredientsArr = ingredientsArr.filter((item) => item.ingredient);\n  let finalIngredientsArr = preFinalIngredientsArr.map((item) => {\n    if (item.measure === null || item.measure === \"\") {\n      return { ingredient: item.ingredient, measure: \"(as preferred)\" };\n    } else {\n      return item;\n    }\n  });\n\n  return finalIngredientsArr;\n};\n\n\n//checking if is in favorite list \nexport const isInFavorite = (array = [], id) => {\n  if (!array) {\n    return false;\n  } else {\n    return array.some((drink) => drink.idDrink === id);\n  }\n};\n\n// add drink to favorite list \n\nexport function saveToFavorite(drink) {\n  let drinks = this.state.favorites;\n  let finalDrinks = [];\n  if (drinks) {\n    if (isInFavorite(drinks, drink.idDrink)) {\n      finalDrinks = drinks.filter((item) => item.idDrink !== drink.idDrink);\n    } else {\n      finalDrinks = [...drinks, drink];\n    }\n\n    //\n  } else {\n    finalDrinks = [drink];\n  }\n  this.setState({ favorites: finalDrinks });\n  localStorage.setItem(\"favoriteDrinks\", JSON.stringify(finalDrinks));\n}"]},"metadata":{},"sourceType":"module"}